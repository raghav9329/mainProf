# Shell Functions moved to .svbshellFuncs on 10/5/2016
#
# Funciton "Move File" 
# Only works in specific directories and between these directories.
giveMeSomeSpace()		# print some output space and lines
{
	echo "..................................."
	echo 
	echo "   ******  Just some space ***** "
	echo 
	echo "..................................."

}


testRunFuncs()		# Test process to at least verify this file 
{  # Test process to at least verify this file 

	pushd /Volumes/dev/ >> /dev/null	

	echo runing the mf - MoveFile function
	mf
	giveMeSomeSpace		
	echo running the whatrepoBranch funciton

	whatrepoBranch

	giveMeSomeSpace	
	
	if [ "$1" != ""  ] ; then
	#if [ -z $1  ] ; then
		updateRepos
		giveMeSomeSpace
	else
		echo NOT running the updateRepos function
		echo that one requires a network connection
	fi

	integrationDirectoriesAndCount
	giveMeSomeSpace		

	echo getDotFiles
	getDotFiles
	giveMeSomeSpace	
	
	echo unitCount
	unitCount
	giveMeSomeSpace	
	
	echo sandboxCount
	sandboxCount
	giveMeSomeSpace	

	svbIntegrationSum



	tstreturn




	sandboxUTCount


	unitTestSum



	popd >> /dev/null
}
##

mf() 			# Function moves files if in specific Loc to specific Loc
{
 if [ -z "$1" ] ; then
   echo "An argument is really necessary "
 fi
 #if [ `pwd` == "/Volumes/dev/svb-web-payments/integration/scenarios"  ] ; then
 if [ `pwd` == "/Volumes/dev/svb-web-payments/integration/qaScenarios"  ] ; then
   if [ -f $1* ]; then
      mv ./$1* /Users/maatkins/Mark/tmp_hold
      else echo "File wasn't there "
   fi
 elif [ `pwd` == "/Users/maatkins/Mark/tmp_hold" ] ; then
   if [ -f $1* ]; then
  #    mv ./$1* /Volumes/dev/svb-web-payments/integration/scenarios
      mv ./$1* /Volumes/dev/svb-web-payments/integration/qaScenarios
      else echo "File wasn't there "
   fi
 else echo "Not in a directory that supports the -mf(move file)- command"
fi
}

whatrepoBranch()		# Iterate through all repos and do a git branch check
{
 	pushd /Volumes/dev/ >> /dev/null
	REPO_DIRECTORIES="/Volumes/dev/svb-*"

   for f in $REPO_DIRECTORIES ; do
	if [ -d "$f"  ]	; then
        cd $f
        pwd 
	    git branch
	    cd ~/
        echo 	
	else
        echo NotWorking
	fi
    done
	echo !! DONE  !!

	popd >> /dev/null
}


updateRepos()		# Iterate through all repos and do a git pull
{
	pushd /Volumes/dev/ >> /dev/null
	REPO_DIRECTORIES="/Volumes/dev/svb-*"
	for f in $REPO_DIRECTORIES ; do
		if [ -d "$f"  ]	; then
			echo "************************************************"
            cd $f
            pwd 
	        git pull
	        cd ~/
              echo 	
		else
            echo NotWorking
			echo something about $f
			echo not resolving in the if -d analysis
		fi
      done
	echo !! DONE  !!
	popd >> /dev/null

}

#integrationDirectoriesAndCount(-) # first to find all *.java under Integration
integrateDirs_UT_Count() 	# first to find all *.java under Integration
{ 
 	echo	
	echo "This is all the Repo's that have Sub Directories named \"integration\" " 
	echo Integration Repository test counts and...
	echo Repository Integration directory count	
	echo

	# ***********************
	# cus I want to get back to where I started 	

	pushd /Volumes/dev/ >> /dev/null

	# *********************
	# godev is an alias call cd to /Volumes/dev
	#godev

	loopCount=0
	componentCount=""
	integrationDirCount=""
	dummyVar=""
	REPO_DIRECTORIES="/Volumes/dev/svb*"
   
	for f in $REPO_DIRECTORIES
     do
		
		if [ "$1" == "allRepos"  ] ; then
			echo $f 
		fi
	#*****************************************
	# loopCount++ cuz in a couple of places I wanted to see how many 
	# times I'd been through the loop and on to another dir
	((loopCount++))

	
	# *************************************
	# are we in one of the directories
	# identified in $REPO_DIRECTORIES ???
	if [ -d "$f"  ]	; then
		
		cd $f
		
	 	componentCount=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
		integrationDirCount=`find . -name integration -type d | wc -l`

		if [ "$componentCount" -lt "1"  ] ; then
			dummyVar=$dummyVar+1
		
		else
		echo "************************************************"
			dirStirng=`pwd`
			echo $dirStirng Java Component Test count: $componentCount
			componentCount=""
			dirString=""
		fi

		if [ "$integrationDirCount" -lt "1" ]  ; then
			dummyVar=$dummyVar+2

		else
			dirString=`pwd`
			echo $dirString Integration Directories: $integrationDirCount
			echo
			integrationDirCount=""
			dirString=""
		fi

		cd ~/
	else
		echo There is a BIG Problem !
		echo Something Critical is Not Working
		echo Something about the main loop variable through all directories in Volumes dev
		echo is not a directory.  Here look at the value of eff
		echo eff is $f
		myLocalVar=""
	fi
   done
	popd >> /dev/null
echo "************************************************"
}



getDotFiles() 		# Gets all the ~/maatkins/.* files. copies to ~/Mark/DotFiles
{   #####################################################
	# In this file I need to set a list of variables that contain the chars in the file names
    # that I don't want  eg: swp for vi swap files,  eg v8Flags ???? why ???   others ???
    # 
	#
	# Todo:  make the check for a *.swp file a case statement alloinwg
	#		 us to check for other file extension types, ex. *.swo, *.json
	#####
	cd /Users/maatkins/
	dirList=`ls -ad .*`
	swpFile=".swp"

	for f in $dirList ; do
 	if [ -f $f ] ; then
		if echo $f | grep -q $swpFile ; then
         echo "Not touching swp file named: "$f
       else
        cp $f /Users/maatkins/Mark/DotFiles
	echo -e $f "\t copied"
     fi  
 fi
done

}

getDotFileTest() 		# test bed for getDotFiles using case statement to avoid file types
{
	echo not doing anything yet
# try to do a Case statement with several checks all
	# Not touching this file named : $f
}


#unitCount(-) # first to find all *.java in ../src/test in each repo. Includes Ingetration *.java
unitCount() 		# Ver 1. Finds *.java in Repo/src/test. Includes Int *.java
{			

	echo
	# ***********************
	# cus I want to get back
	# to where I started 	
	pushd /Volumes/dev/ >> /dev/null

	testSum=0
	loopCount=0
	componentCount=0
	utCount=0
	integrationDirCount=0
	dummyVar=""
	REPO_DIRECTORIES="/Volumes/dev/svb*"
	themagicPlace="src/test"
	activeDir=""
   
	for f in $REPO_DIRECTORIES
     do
		
		if [ "$1" == "allRepos"  ] ; then
			echo $f 
		fi
		#*****************************************
		# loopCount++ cuz in a couple of places
		# I wanted to see how many times I'd been
		# through the loop and on to another dir
		((loopCount++))
	
	# *************************************
	# are we in one of the directories
	# identified in $REPO_DIRECTORIES ???
	if [ -d "$f"  ]	; then
#debug	echo "************************************************00"
		cd $f
#debug	echo $loopCount

		if [ -d "./src/test/"   ] ; then
#debug			echo found it !!!!
			cd ./src/test/
#debug		pwd
			#componentCount=` find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			utCount=` find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			testSum=$(( testSum + utCount ))

#debug		echo having just run find in ...src/test/ what is the componentCount
#debug		echo $componentCount
				
		fi
		
		
	    #componentCount=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
		#integrationDirCount=`find . -name integration -type d | wc -l`

#debug	echo is there a Bash Integer Expression expected warning next 11 ??	
		if [ "$utCount" -gt 0  ] ; then

# for now...		echo "************************************************11"
			cd $f
			dirStirng=`pwd`
			tabString=" \t \t "
			echo -e $dirStirng" :"$utCount
			#echo "                   Test_Sum is: $testSum"
#			echo Test count Summation is: $testSum
			echo 
			utCount=0
			dirString=""
		else
			dummyVar=$dummyVar+1
			
		fi


#debug	echo is there a Bash Integer Expression expected warning next 22 ??	
		if [ "$integrationDirCount" -gt 0 ]  ; then
			dirString=`pwd`
			echo $dirString Unit Test Directories: $integrationDirCount
			echo
			integrationDirCount=0
			dirString=""
		else
			dummyVar=$dummyVar+2
	
		fi

		cd ~/
	else
		echo NotWorking
		echo eff is $f
		myLocalVar=""
	fi
   done
	popd >> /dev/null
#	testSum=$((testSum - 250 - 43 - 347 - 31 - 3 ))
#	echo $testSum
echo "************************************************"

}


sandboxCount()		# Ver 1. Finds *.java in all LIB/src/test dir tree
{	#yyy__repoLookInt(-)
	
	echo 
	# ***********************
	# cus I want to get back
	# to where I started 	
	pushd /Volumes/dev/ >> /dev/null


	testSum=0
	loopCount=0
	componentCount=0
	utCount=0
	integrationDirCount=0
	dummyVar=""
	REPO_DIRECTORIES="/Volumes/dev/svb-services-sandbox/*"
	themagicPlace="src/test"
	activeDir=""
  
 
	for f in $REPO_DIRECTORIES
     do
	
		if [ "$1" == "allRepos"  ] ; then
			echo $f 
		fi
	
	#*****************************************
	# loopCount++ cuz in a couple of places
	# I wanted to see how many times I'd been
	# through the loop and on to another dir
	((loopCount++))
	
	# *************************************
	# are we in one of the directories
	# identified in $REPO_DIRECTORIES ???
	if [ -d "$f"  ]	; then
		cd $f

		if [ -d "./src/test/"   ] ; then
			cd ./src/test/
			utCount=` find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			testSum=$(( testSum + utCount ))

		fi

		if [ "$utCount" -gt 0  ] ; then
			cd $f
			dirStirng=`pwd`
			tabString=" \t \t "
			echo -e $dirStirng  
			#echo Java Unit Test count: $utCount Test_Sum is: $testSum  
			echo Java Unit Test count: $utCount 
			echo 
			utCount=0
			dirString=""
		else
			dummyVar=$dummyVar+1
			
		fi

		# likely to remove the intDirCount secion
		# sandox doesn't have any integration directories
		if [ "$integrationDirCount" -gt 0 ]  ; then
			dirString=`pwd`
			echo $dirString Unit Test Directories: $integrationDirCount
			echo
			integrationDirCount=0
			dirString=""
		else
			dummyVar=$dummyVar+2
		fi

		#cd ~/  don't think I needed to do thie every time
	#else
	#	echo NotWorking
	#	echo eff is $f
	#	myLocalVar=""
	fi
   done
	popd >> /dev/null
echo "************************************************"
}

################
#  
# Get the count of integration tests in the repo's identified
# In order to check if this is the proper list of repo's run unitCount(-)
# 
#  
###
svbIntegrationSum()		# Ver 2 of integrationDirs_UT_Count
{
    Index=0

	pushd /Volumes/dev/ >> /dev/null
	directories=" svb-service-accounts svb-service-bankinfo svb-service-client 
	svb-service-csrf svb-service-entitlements svb-service-ooba svb-service-payments"

	for i in $directories ; do
		cd $i
		#pwd
		tabChar="\t"
#		immediate=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
		answersArray[Index]=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
# debug echo -e $i $tabChar $immediate
# debug echo
# debugecho The number of elements
# debug echo ${#answersArray[@]}
		cd /Volumes/dev
		((Index++))

	done
	
#	echo done Loading now putting out the dollar answer array #	echo $answersArray
#	echo #		echo .......  #		echo number of ele to follow #		echo size ${#answersArray[@]}
#		echo elems ${answersArray[@]} #		echo zero? ${#answerArray[*]} #		echo the rest
#		echo 0: ${directories[0]} ${answersArray[0]} #		echo 1: ${directories[1]} ${answersArray[1]}
#		echo 2: ${directories[2]} ${answersArray[2]} #		echo 3: ${directories[3]} ${answersArray[3]}
#		echo 4: ${directories[4]} ${answersArray[4]} #		echo 5: ${directories[5]} ${answersArray[5]}
#		echo 6: ${directories[6]} ${answersArray[6]} #		echo this could be wierd #		echo 7: ${answersArray[7]}


		#if [[ $1 == "" ]] ; then
		if [ -z $1  ] ; then
			echo ......		
		fi

		x=0
		sum=0
		for i in $directories ; do

		#if [[ $1 == "" ]] ; then
		if [ -z $1  ] ; then
			echo ${answersArray[x]} $i

		fi
			sum=$((sum+${answersArray[x]}))
			((x++))
		done

		#if [[ $1 == "" ]] ; then
		if [ -z $1  ] ; then
			echo the sum is: $sum
			echo 
		fi
#   	debug echo inside svbIntegrationSum, arg[0] = $1	
#		debug echo inside svbIntegrationSum, sum  = $sum
		if [ -z $1  ] ; then
			echo ""
		else
			echo debug trying to set arg[1] to the sum in next command
			#eval $1=$((sum))
			eval $1=$((sum))
			return $1
		fi

		answersArray="" 
		Index="" 
		x=0
		sum=0
		popd >> /dev/null
}

#tstreturn(-)			# Ver 1 of Test Reporting Func
tstreturn()			# Ver 1 of Test Reporting Func
{
	difference=0
	utCountOnly=0
	repoIntegrationCount=0
	javaLibUTCount=0

	if [ $# -ne 0  ] ; then #if num of arguments != 0
		svbIntegrationSum
		unitTestSum
	fi
	echo
	echo calling svbIntegrationSum [ repoIntegrationCount ] redirect to dev-null
  	svbIntegrationSum repoIntegrationCount > /dev/null 2>&1
	echo after calling svbIntegrationSum [ repoIntegrationCount ]
	echo the value of the repoIntegraitonCount Var is : $repoIntegrationCount
	echo

	echo calling unitTestSum [ unitTestSumResult ] redirect to dev-null
	unitTestSum unitTestSumResult > /dev/null 2>&1
	echo after calling unitTestSum [ unitTestSumResult ]
	echo the value of the unitTestSumResult Var is : $unitTestSumResult
	echo

	echo calling sandboxUTCount [ javaLibUTCount ] redirect to dev-null
	sandboxUTCount javaLibUTCount > /dev/null 2>&1
	echo after calling sandboxUTCount [ javaLibUTCount ] redirect to dev-null
	echo the value of the javaLibUTCount var is : $javaLibUTCount
	echo


	echo subtracting $repoIntegrationCount from $unitTestSumResult and should be "somevalue"
	echo the diff in subtracting variables is: $((unitTestSumResult - repoIntegrationCount ))
	echo	
	echo Test Setting a variable to this difference
	
	utCountOnly=$((unitTestSumResult - repoIntegrationCount ))
	utCountOnly=$(( utCountOnly + javaLibUTCount ))
	echo echoing utCountOnly variable: $utCountOnly
	echo 
	echo So, reporting should look like
	echo  Integration Test Count: $repoIntegrationCount
	echo "       Unit Test Count: "$utCountOnly

#	echo subtraction result is: $(( withAnotherVariable - repoIntegrationCount  ))
#	echo
#	#eval differenc=$((withAnotherVariable - repoIntegraitonCount))
#	differenc=$(( withAnotherVariable - repoIntegratitonCount ))
#	echo   Unit test count: $difference
#	echo Integration Count: $repoIntegrationCount
	difference=0
	repoIntegrationCount=0
}

sandboxUTCount()		# Ver 2 of sandboxCount. Returns sum if asked
{
    Index=0
	sum=0
	pushd /Volumes/dev/ >> /dev/null

#	directories=" svb-service-payments svb-service-entitlements svb-service-ooba
#	svb-scheduler-payments svb-service-accounts svb-service-csrf svb-service-client
#	svb-service-bankinfo"
	REPO_DIRECTORIES="/Volumes/dev/svb-services-sandbox/*"

#  Need to get sand box repo libs httpClient auth dbconnector logger Monotiring Exception Mappers	

	for i in $REPO_DIRECTORIES ; do

		if [ -d "$i" ] ; then 
			cd $i

			if [ -d "./src/test/"   ] ; then
          		 cd ./src/test/
				#find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l
				answersArray[Index]=`find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
				cd /Volumes/dev
				((Index++))
			fi
		fi
	done

	if [ -z $1  ] ; then
		echo ......		
	fi

	x=0
	sum=0
	for i in $REPO_DIRECTORIES ; do

		if [ -f "$i"  ] ; then		
			echo ""
		
		else	
			if [ -z $1  ] ; then
				echo  ${answersArray[x]} $i
			fi
		 	
			sum=$((sum + ${answersArray[x]}))
			((x++))
		fi	
	done

	if [ -z $1  ] ; then
		echo the sum is: $sum
		echo 
	fi

	#   	debug echo inside svbIntegrationSum, arg[0] = $1	
	#		debug echo inside svbIntegrationSum, sum  = $sum
	if [ -z $1  ] ; then
		echo ""
	else
		echo debug trying to set arg[1] to the sum in next command
		eval $1=$((sum))
		return $1
	fi

	answersArray="" 
	Index="" 
	x=0
	sum=0
	popd >> /dev/null

}

unitTestSum()		# Ver 2 of unitCount. Returns sum if asked
{
    Index=0

	pushd /Volumes/dev/ >> /dev/null
	directories=" svb-service-payments svb-service-entitlements svb-service-ooba
	svb-scheduler-payments svb-service-accounts svb-service-csrf svb-service-client
	svb-service-bankinfo"

#  Need to get sand box repo libs httpClient auth dbconnector logger Monotiring Exception Mappers	

	for i in $directories ; do
		cd $i
        if [ -d "./src/test/"   ] ; then
            cd ./src/test/
			answersArray[Index]=`find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			cd /Volumes/dev
			((Index++))
		fi
	done

		if [ -z $1  ] ; then
			echo ......		
		fi

		x=0
		sum=0
		for i in $directories ; do

		if [ -z $1  ] ; then
			echo ${answersArray[x]} $i

		fi
			sum=$((sum+${answersArray[x]}))
			((x++))
		done

		if [ -z $1  ] ; then
			echo the sum is: $sum
			echo 
		fi
#   	debug echo inside svbIntegrationSum, arg[0] = $1	
#		debug echo inside svbIntegrationSum, sum  = $sum
		if [ -z $1  ] ; then
			echo ""
		else
			echo debug trying to set arg[1] to the sum in next command
			eval $1=$((sum))
			return $1
		fi

		answersArray="" 
		Index="" 
		x=0
		sum=0
		popd >> /dev/null
}

team2UtCFe()		# Ver 2 Unit Test Count in svb-web-payments. Val returned if asked
{
	REPO_DIRECTORIES="/Volumes/dev/svb-web-payments/"
	returnVal=0
	
	cd /Volumes/dev/svb-web-payments/app/src
		returnVal=$( grep -r "\sit(" * | wc -l)
		if [ -z $1 ] ; then
			echo "test count is: $returnVal"	
		else
			#eval $1 = $((returnVal))
			#tempVar=0
			#returnVal=$((returnVal + tempVar ))
			# debug	echo "debug returnVal ="$returnVal
			eval $1=$((returnVal))
			return $1
		fi
	
	returnVal=0
	echo ""
}

#team23UtCoreUi()		# Ver 2 UnitTEst Count in svb-web-core-ui. Val returned if askedi
#{
#	REPO_DIRECTORIES="/Volumes/dev/svb-web-core-ui/*
#
#
#
#echo ""
#}


#  end of file 
