# Shell Functions moved to .svbshellFuncs on 10/5/2016
#
# Funciton "Move File" 
# Only works in specific directories and between these directories.
mf()
{
 if [ -z "$1" ] ; then
   echo "An argument is really necessary "
 fi
 #if [ `pwd` == "/Volumes/dev/svb-web-payments/integration/scenarios"  ] ; then
 if [ `pwd` == "/Volumes/dev/svb-web-payments/integration/qaScenarios"  ] ; then
   if [ -f $1* ]; then
      mv ./$1* /Users/maatkins/Mark/tmp_hold
      else echo "File wasn't there "
   fi
 elif [ `pwd` == "/Users/maatkins/Mark/tmp_hold" ] ; then
   if [ -f $1* ]; then
  #    mv ./$1* /Volumes/dev/svb-web-payments/integration/scenarios
      mv ./$1* /Volumes/dev/svb-web-payments/integration/qaScenarios
      else echo "File wasn't there "
   fi
 else echo "Not in a directory that supports the -mf(move file)- command"
fi
}

whatrepoBranch()
{
 	pushd /Volumes/dev/ >> /dev/null
	REPO_DIRECTORIES="/Volumes/dev/svb-*"

   for f in $REPO_DIRECTORIES
     do
	if [ -d "$f"  ]	
          then
              cd $f
              pwd 
	      git branch
	      cd ~/
              echo 	
	else
              echo NotWorking
	fi
      done
echo !! DONE  !!

	popd >> /dev/null
}


updateRepos()
{
 	pushd /Volumes/dev/ >> /dev/null
	REPO_DIRECTORIES="/Volumes/dev/svb-*"
   for f in $REPO_DIRECTORIES
     do
		if [ -d "$f"  ]	
          then
              echo "************************************************"
              cd $f
              pwd 
	      git pull
	      cd ~/
              echo 	
		else
              echo NotWorking
			  echo something about $f
			  echo not resolving in the if -d analysis
		fi
      done
	echo !! DONE  !!
	popd >> /dev/null

}

integrationCount()
{ #repoLookInt()
  
	echo Repository Integration test counts and...
	echo Repository Integration directory count	
	# ***********************
	# cus I want to get back
	# to where I started 	
	pushd /Volumes/dev/ >> /dev/null

	# *********************
	# godev is an alias call cd to /Volumes/dev
	#godev

	loopCount=0
	componentCount=""
	integrationDirCount=""
	dummyVar=""
	REPO_DIRECTORIES="/Volumes/dev/svb*"
   
	for f in $REPO_DIRECTORIES
     do
		
		if [ "$1" == "allRepos"  ] ; then
			echo $f 
		fi
		#*****************************************
		# loopCount++ cuz in a couple of places
		# I wanted to see how many times I'd been
		# through the loop and on to another dir
		((loopCount++))
	
	# *************************************
	# are we in one of the directories
	# identified in $REPO_DIRECTORIES ???
	if [ -d "$f"  ]	; then
		
		cd $f
		
	 	componentCount=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
		integrationDirCount=`find . -name integration -type d | wc -l`

		if [ "$componentCount" -lt "1"  ] ; then
			dummyVar=$dummyVar+1
		
		else
		echo "************************************************"
			dirStirng=`pwd`
			echo $dirStirng Java Component Test count: $componentCount
			componentCount=""
			dirString=""
		fi

		if [ "$integrationDirCount" -lt "1" ]  ; then
			dummyVar=$dummyVar+2

		else
			dirString=`pwd`
			echo $dirString Integration Directories: $integrationDirCount
			echo
			integrationDirCount=""
			dirString=""
		fi

		cd ~/
	else
		echo NotWorking
		echo eff is $f
		myLocalVar=""
	fi
   done
	popd >> /dev/null
echo "************************************************"
}



unitTestCountPayments()
{	echo payments repo
	gosvb # /Volumes/dev/svb-web-payments/
	cd app/src
	grep -r "\sit(" * | wc -l
}

unitTestCountCoreUi()
{	echo  web-core-ui repo
	godev
	cd svb-web-core-ui/src
	grep -r "\sit(" * | wc -l
}


integrationTestCountMock()
{	echo mockBackend 
	gosvb; 
	cd integration/mockBackend
	grep -r "\sit(" * | wc -l
}

integrationTestCountE2E()
{	echo e2e scenarios
	gosvb; 
	cd integration/scenarios
	grep -r "\sit(" * | wc -l
}

integrationTestCountAll()
{	echo All Integration test
	gosvb; 
	cd integration
	grep -r "\sit(" * | wc -l
}

testcountbyCase()
{	echo test case count by Case
	if [ -z $1  ] ; then
	   scriptVar="scriptVar 3, 5, 7, 11, 13, 17" 
	   else scriptVar=$1
	fi
	
	case $scriptVar in
		
		3)
		echo case 3
		  ;;
		5)
		echo case 5
		  ;;
		7)
		echo case 7
		  ;;
		11)
		echo case 11
		  ;;
		13)
		echo case 13
		  ;;
		17)
		echo case 17
		  ;;
		*)
		echo the value of sriptVariable is $scriptVar
		  ;;
			
	esac
}


getDotFiles()
{   # In this file I need to set a list of variables that contain the chars in the file names
    # that I don't want  eg: swp for vi swap files,  eg v8Flags ???? why ???   others ???
    # ====================================================================================
cd /Users/maatkins/
dirList=`ls -ad .*`
swpFile=".swp"

for f in $dirList
do
 if [ -f $f ]
   then
     if echo $f | grep -q $swpFile
       then
         echo "Not touching swp file named: "$f
       else
        cp $f /Users/maatkins/Mark/DotFiles
	echo -e $f "\t copied"
     fi  
 fi
done

}

findBuildGradle()
{
	theFile="build.gradle"
	REPO_DIRECTORIES="/Volumes/dev/svb-*"
	for d in $REPO_DIRECTORIES
	 do
	  if [ -d "$d" ]
	   then
	      FILE_LIST=`ls`
		for f in $FILE_LIST
		do
		  if echo $f | grep $theFile
		  then
			pwd
			ls -alF build.gradle
		  fi

	 	done
          fi 
	 done

}


unitCount()
{	#XXX__repoLookInt()
	echo	
	# ***********************
	# cus I want to get back
	# to where I started 	
	pushd /Volumes/dev/ >> /dev/null

	testSum=0
	loopCount=0
	componentCount=0
	utCount=0
	integrationDirCount=0
	dummyVar=""
	REPO_DIRECTORIES="/Volumes/dev/svb*"
	themagicPlace="src/test"
	activeDir=""
   
	for f in $REPO_DIRECTORIES
     do
		
		if [ "$1" == "allRepos"  ] ; then
			echo $f 
		fi
		#*****************************************
		# loopCount++ cuz in a couple of places
		# I wanted to see how many times I'd been
		# through the loop and on to another dir
		((loopCount++))
	
	# *************************************
	# are we in one of the directories
	# identified in $REPO_DIRECTORIES ???
	if [ -d "$f"  ]	; then
#debug	echo "************************************************00"
		cd $f
#debug	echo $loopCount

		if [ -d "./src/test/"   ] ; then
#debug			echo found it !!!!
			cd ./src/test/
#debug		pwd
			#componentCount=` find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			utCount=` find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			testSum=$(( testSum + utCount ))

#debug		echo having just run find in ...src/test/ what is the componentCount
#debug		echo $componentCount
				
		fi
		
		
	    #componentCount=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
		#integrationDirCount=`find . -name integration -type d | wc -l`

#debug	echo is there a Bash Integer Expression expected warning next 11 ??	
		if [ "$utCount" -gt 0  ] ; then

# for now...		echo "************************************************11"
			cd $f
			dirStirng=`pwd`
			tabString=" \t \t "
			echo -e $dirStirng" :"$utCount
			#echo "                   Test_Sum is: $testSum"
#			echo Test count Summation is: $testSum
			echo 
			utCount=0
			dirString=""
		else
			dummyVar=$dummyVar+1
			
		fi


#debug	echo is there a Bash Integer Expression expected warning next 22 ??	
		if [ "$integrationDirCount" -gt 0 ]  ; then
			dirString=`pwd`
			echo $dirString Unit Test Directories: $integrationDirCount
			echo
			integrationDirCount=0
			dirString=""
		else
			dummyVar=$dummyVar+2
	
		fi

		cd ~/
	else
		echo NotWorking
		echo eff is $f
		myLocalVar=""
	fi
   done
	popd >> /dev/null
#	testSum=$((testSum - 250 - 43 - 347 - 31 - 3 ))
#	echo $testSum
echo "************************************************"

}


sandboxCount()
{	#yyy__repoLookInt()
	
	echo 
	# ***********************
	# cus I want to get back
	# to where I started 	
	pushd /Volumes/dev/ >> /dev/null


	testSum=0
	loopCount=0
	componentCount=0
	utCount=0
	integrationDirCount=0
	dummyVar=""
	REPO_DIRECTORIES="/Volumes/dev/svb-services-sandbox/*"
	themagicPlace="src/test"
	activeDir=""
  
 
	for f in $REPO_DIRECTORIES
     do
	
		if [ "$1" == "allRepos"  ] ; then
			echo $f 
		fi
	
	#*****************************************
	# loopCount++ cuz in a couple of places
	# I wanted to see how many times I'd been
	# through the loop and on to another dir
	((loopCount++))
	
	# *************************************
	# are we in one of the directories
	# identified in $REPO_DIRECTORIES ???
	if [ -d "$f"  ]	; then
		cd $f

		if [ -d "./src/test/"   ] ; then
			cd ./src/test/
			utCount=` find . -name '*.java' -print0 |xargs -0 grep -r @Test| wc -l`
			testSum=$(( testSum + utCount ))

		fi

		if [ "$utCount" -gt 0  ] ; then
			cd $f
			dirStirng=`pwd`
			tabString=" \t \t "
			echo -e $dirStirng  
			#echo Java Unit Test count: $utCount Test_Sum is: $testSum  
			echo Java Unit Test count: $utCount 
			echo 
			utCount=0
			dirString=""
		else
			dummyVar=$dummyVar+1
			
		fi

		# likely to remove the intDirCount secion
		# sandox doesn't have any integration directories
		if [ "$integrationDirCount" -gt 0 ]  ; then
			dirString=`pwd`
			echo $dirString Unit Test Directories: $integrationDirCount
			echo
			integrationDirCount=0
			dirString=""
		else
			dummyVar=$dummyVar+2
		fi

		#cd ~/  don't think I needed to do thie every time
	#else
	#	echo NotWorking
	#	echo eff is $f
	#	myLocalVar=""
	fi
   done
	popd >> /dev/null
echo "************************************************"
}

svbIntSum()
{
	arrayIndex=0

	pushd /Volumes/dev/ >> /dev/null
  directories="
svb-service-accounts 
svb-service-bankinfo 
svb-service-client 
svb-service-csrf 
svb-service-entitlements
svb-service-ooba
svb-service-payments"

	for i in $directories
#	for i in svb-scheduler-payments svb-web-core-ui svb-vagrant svb-murano-config
	do
		#((arrayIndex++))
		cd $i
		#pwd
		tabChar="\t"
		immediate=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
		answersArray[arrayIndex]=`find . -name 'integration' -print0 | xargs -0 grep -r @Test | wc -l`
# debug echo -e $i $tabChar $immediate
# debug echo
# debugecho The number of elements
# debug echo ${#answersArray[@]}
		cd /Volumes/dev
		((arrayIndex++))

	done
	
#	echo done Loading now putting out the dollar answer array
#	echo $answersArray
#	echo
#		echo .......
#		echo number of ele to follow
#		echo size ${#answersArray[@]}
#		echo elems ${answersArray[@]}
#		echo zero? ${#answerArray[*]}
#		echo the rest
#		echo 0: ${directories[0]} ${answersArray[0]}
#		echo 1: ${directories[1]} ${answersArray[1]}
#		echo 2: ${directories[2]} ${answersArray[2]}
#		echo 3: ${directories[3]} ${answersArray[3]}
#		echo 4: ${directories[4]} ${answersArray[4]}
#		echo 5: ${directories[5]} ${answersArray[5]}
#		echo 6: ${directories[6]} ${answersArray[6]}
#		echo this could be wierd
#		echo 7: ${answersArray[7]}
		echo ......		
		index=0
		sum=0
		for i in $directories ; do
			echo ${answersArray[index]} $i
			sum=$((sum+${answersArray[index]}))
		
			((index++))
		done
			
		echo the sum is: $sum
		echo 

		answersArray="" 
		arrayIndex="" 
		sum=0
		popd >> /dev/null
}

#  end of file 
