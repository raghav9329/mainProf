//CXINIT-489 : [Personal Info Page] Address - Home - close

//This Spec validates the Home Address with all the possible ways
//Verifies the Home address with the empty data sets (Null Values), Invalid data and special characters
//Validation of the above is applicable for all the fields of the Home address like Zipcode, Home address

var TestData = require("../../testData/aarphmo/aarphmo.489.json");
var perInfo = new(require('../../pageObjects/cxinit/perInfo-page.js'));
var enrollPage = new(require('../../pageObjects/cxinit/enroll-page.js'));

describe('AARP-489: Address Home fields-PersINfo', function() {
		
   beforeAll(function() {
        console.log(' ');
        console.log('--- AARP-471 Personal Info Fields ---')
        Utility.openApplication('','AARP');
    });
    
    
    beforeEach(function() {
        Utility.waitUntilPageLoaded();
    });

    it('489PI 1:should be able to open Login page and verify', function() {
        enrollPage.enterHomePageDetails(TestData.enrollData);    
        expect(perInfo.fieldFirstName.isPresentAndDisplayed()).toBeTruthy();
        console.log('489PI 1: Complete')
    });

    //Validate all the fields of the Home Address is present and displayed

    it('Step-1:Validate all fields are present and displayed', function() {
        expect(perInfo.fieldHomeAddr.isPresentAndDisplayed()).toBeTruthy();
        expect(perInfo.fieldCity.isPresentAndDisplayed()).toBeTruthy();
        expect(perInfo.fieldState.isPresentAndDisplayed()).toBeTruthy();
        expect(perInfo.fieldZipCode.isPresentAndDisplayed()).toBeTruthy();
        expect(perInfo.chkBoxDiffMailAddr.isPresentAndDisplayed()).toBeTruthy();
    });

    //Validate and verify the error by Tabout from the Home Address field

    it('Step-2:Validate Home Address field with Click/tabout', function() {
        perInfo.fieldHomeAddr.setText('' + '\t');
        expect(perInfo.errMsgHomeAddr.getText()).toEqual(TestData.ErrorMsg_Homeaddress);
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_error);
    });

    //Validate and verify the error by Tabout from the City field under the Home Address

    it('Step-3:Validate City field with Click/tabout', function() {
        perInfo.fieldCity.setText('' + '\t');
        expect(perInfo.errMsgCity.getText()).toEqual(TestData.ErrorMsg_city);
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_error);
    });

    //Validate and verify the error by Tabout from the State field under the Home Address

    it('Step-4:Validate State field with Click/tabout', function() {
        perInfo.fieldState.setText('' + '\t');
        expect(perInfo.errMsgState.getText()).toEqual(TestData.ErrorMsg_State);
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_error);
    });

    //Validate and verify the error by Tabout from the Zipcode field under the Home Address

    it('Step-5:Validate Zip Code field with Click/tabout', function() {
        perInfo.fieldZipCode.setText('' + '\t');
        expect(perInfo.errMsgZipCode.getText()).toEqual(TestData.ErrorMsg_ZipCode);
        expect(perInfo.fieldZipCode.getAttribute("class")).toContain(TestData.ariainvalid_error);
    });
});

describe('CXINIT-489::492 - Validate Home Address field with valid and invalid data', function() {
    beforeAll(function() {
        Utility.openApplication('','AARP');
        browser.driver.findElement(by.name('planZip')).clear().then(function() {
            browser.driver.findElement(by.name('planZip')).sendKeys('94560');
            browser.actions().sendKeys(protractor.Key.ENTER).perform();
            perInfo.fillPersonalInfo(TestData);
           // return true;
        });
    });

    //Validate the Home Address fields (Home address, city) with Blank data Sets

    it('Step-6:Validate Home Address with blank data', function() {
        data = TestData.Personalinfo.HAddress_Blank;
        perInfo.fieldHomeAddr.setText(data.Home);
        perInfo.fieldCity.setText(data.City+'\t');
        //perInfo.fieldState.setText(data.State);     

        expect(perInfo.errMsgHomeAddr.getText()).toEqual(data.ErrorMsg);
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_error);
        //expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_success);
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });

    //Validate the Home Address fields (Home address, city) with Valid data Sets

    it('Step-7:Validate Home Address with valid data', function() {
        data = TestData.Personalinfo.HAddress_Valid;
        perInfo.fieldHomeAddr.setText(data.Home + '\t');
        
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_success);
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_success);
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });

    //Validate the Home Address fields (Home address, city) with Invalid data Sets

    it('Step-8:Validate Home Address with invalid data', function() {
        data = TestData.Personalinfo.HAddress_Invalid;
        perInfo.fieldHomeAddr.setText(data.Home + '\t');
        
        expect(perInfo.errinvalidAddr.getText()).toEqual(data.ErrorMsg);
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_error);
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_error);
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_error);
    });

    //Validate the Home Address fields (Home address, city) with Special character data Sets

    it('Step-9:Validate Home Address with special char', function() {
        data = TestData.Personalinfo.HAddress_SplChar;
        perInfo.fieldHomeAddr.setText(data.Home);
        perInfo.fieldAlternateId.setText('');
        expect(perInfo.errinvalidAddr.getText()).toEqual(data.ErrorMsg);
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_success);

    });

    //Validate Error of Zipcode when changed/updated to another

    it('Step-10:Validate Home Address with another zip code address ', function() {
        data = TestData.Personalinfo.HAddress_ZIP;
        // perInfo.fieldHomeAddr.setText(data.Home);

        perInfo.fieldHomeAddr.setText(data.HomeAddress);
        perInfo.selectHomeAddress(data.FullAddress);
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_success);

    });

    //Validate the Zipcode Error by changing the Zip code with another value

    it('Step-11:Validate Home Address changing zip code', function() {
        // browser.sleep(20000);
        perInfo.fieldZipCode.setText('94105' + '\t');
         browser.sleep(4000);
        expect(perInfo.zipPopBack.isPresentAndDisplayed()).toBeTruthy();
        perInfo.zipPopBack.click();
        // browser.sleep(4000);
        expect(perInfo.fieldHomeAddr.getAttribute("class")).toContain(TestData.ariainvalid_error);
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_error);
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_error);
        expect(perInfo.fieldZipCode.getAttribute("class")).toContain(TestData.ariainvalid_error);
    });
});

// Validating the City field with the multiple valid and Invalid Test Data

describe('CXINIT-489::492- Validate city field with valid and invalid data', function() {
    beforeEach(function() {
        Utility.openApplication('','AARP');
        browser.driver.findElement(by.name('planZip')).clear().then(function() {
            browser.driver.findElement(by.name('planZip')).sendKeys('94560');
            browser.actions().sendKeys(protractor.Key.ENTER).perform();
            perInfo.fillPersonalInfo(TestData);
           // return true;
        });
    });

    it('Step-12:Enter ' + TestData.City1 + ' data in city field', function() {
        perInfo.fieldHomeAddr.setText(TestData.Address_Valid.Home);
        perInfo.fieldCity.setText(TestData.City1 + '\t');
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
    it('Step-13:Enter ' + TestData.City2 + ' data in city field', function() {
        perInfo.fieldCity.setText(TestData.City2 + '\t');
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
    it('Step-14:Enter ' + TestData.City3 + ' data in city field', function() {
        perInfo.fieldCity.setText(TestData.City3 + '\t');
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
    it('Step-15:Enter ' + TestData.City4 + '  in city field', function() {
        perInfo.fieldCity.setText(TestData.City4 + '\t');
        expect(perInfo.fieldCity.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
});

// Validating the State field with the multiple valid and Invalid Test Data


describe('CXINIT-489::492 - Validate state field with valid and invalid data', function() {
    beforeEach(function() {
        Utility.openApplication('','AARP');
        browser.driver.findElement(by.name('planZip')).clear().then(function() {
            browser.driver.findElement(by.name('planZip')).sendKeys('94560');
            browser.actions().sendKeys(protractor.Key.ENTER).perform();
            perInfo.fillPersonalInfo(TestData);
            //return true;
        });
    });
    it('Step-16:Enter ' + TestData.State1 + ' in State field', function() {
        perInfo.fieldState.setText(TestData.State1 + '\t');
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
    it('Step-17:Enter ' + TestData.State2 + ' in State field', function() {
        perInfo.fieldState.setText(TestData.State2 + '\t');
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
    it('Step-18:Enter ' + TestData.State3 + ' in State field', function() {
        perInfo.fieldState.setText(TestData.State3 + '\t');
        expect(perInfo.fieldState.getAttribute("class")).toContain(TestData.ariainvalid_success);
    });
});

//Validate Zipcode field with the Valid and Invalid Test Data sets for all the fields (Home address, city, state and zipcode)

describe('CXINIT-489::492 - Validate Zip code field with valid and invalid data', function() {
    beforeEach(function() {
        Utility.openApplication('','AARP');
        browser.driver.findElement(by.name('planZip')).clear().then(function() {
            browser.driver.findElement(by.name('planZip')).sendKeys('94560');
            browser.actions().sendKeys(protractor.Key.ENTER).perform();
            perInfo.fillPersonalInfo(TestData);
            //return true;
        });
    });
    it('Step-19: Enter valid values for each field', function() {
        data = TestData.Address_Valid;
        perInfo.fieldHomeAddr.setText(data.Home);
        perInfo.fieldCity.setText(data.City);
        perInfo.fieldState.setText(data.State);
        perInfo.fieldZipCode.setText(data.ZIPcode + '\t');
        expect(perInfo.zipPopBack.isPresentAndDisplayed()).toBeTruthy();
        perInfo.zipPopBack.click();
        expect(perInfo.fieldZipCode.getAttribute("class")).not.toContain(TestData.ariainvalid_error);

    });
    it('Step-20: Enter invalid values for each field', function() {
        data = TestData.Address_Invalid;
        perInfo.fieldHomeAddr.setText(data.Home);
        perInfo.fieldCity.setText(data.City);
        perInfo.fieldState.setText(data.State);
        perInfo.fieldZipCode.setText(data.ZIPcode + '\t');
        expect(perInfo.errMsgZipCode.getText()).toEqual(data.ErrorMsg);
        perInfo.errMsgZipCode.click();
        expect(perInfo.fieldZipCode.getAttribute("class")).not.toContain(TestData.ariainvalid_error);
    });
});
